{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/j3eun97/Tobigs11_works/blob/jeeeun/CIFAR-10%20TF%202%20layer%20CNN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "SjaY6XCk4Aw4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "31bdb025-6368-4c55-ef77-139c8cd9d584"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pickle\n",
        "import matplotlib.pyplot as plt\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Activation\n",
        "from keras.optimizers import SGD\n",
        "from keras.datasets import cifar10\n",
        "from keras.utils.np_utils import to_categorical  \n",
        "from keras.layers import Dense, Flatten\n",
        "from keras.layers import Conv2D, MaxPooling2D"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "id": "NppP9yLG4HNo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "1768ee34-919d-40b2-a352-575dbc2a7d23"
      },
      "cell_type": "code",
      "source": [
        "(X_train, y_train), (X_test, y_test) = cifar10.load_data()"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
            "170500096/170498071 [==============================] - 28s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ugFagyTK4KCv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "outputId": "8b1dc283-5d87-48d4-be98-40f9b9e87928"
      },
      "cell_type": "code",
      "source": [
        "y_train = to_categorical(y_train, num_classes=10)\n",
        "y_test = to_categorical(y_test, num_classes=10)\n",
        "X_train = X_train.astype('float32')\n",
        "X_test = X_test.astype('float32')\n",
        "X_train /= 255\n",
        "X_test /= 255\n",
        "print(X_train.shape)\n",
        "print(y_train.shape)\n",
        "print(X_test.shape)\n",
        "print(y_test.shape)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(50000, 32, 32, 3)\n",
            "(50000, 10)\n",
            "(10000, 32, 32, 3)\n",
            "(10000, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "NY3e2S5o4M3l",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "aec501b1-c66c-4a7a-b821-3c1766f8b036"
      },
      "cell_type": "code",
      "source": [
        "#We will use two convolutional layers, each with 32 filters a kernel size of (3,3) and ReLU activation function.\n",
        "model = Sequential()\n",
        "\n",
        "model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))\n",
        "model.add(Conv2D(32, (3, 3), activation='relu'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "\n",
        "model.add(Flatten())\n",
        "model.add(Dense(256, activation='relu'))\n",
        "model.add(Dense(10, activation='softmax'))\n",
        "\n",
        "sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n",
        "model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer=sgd)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Colocations handled automatically by placer.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "jtWOMji54PVP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 639
        },
        "outputId": "dd7480a4-0092-44e7-d4ba-b7f5901e5eb5"
      },
      "cell_type": "code",
      "source": [
        "history = model.fit(X_train, y_train, batch_size=32, epochs=15, verbose=2, validation_split=0.2)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.cast instead.\n",
            "Train on 40000 samples, validate on 10000 samples\n",
            "Epoch 1/15\n",
            " - 15s - loss: 1.5183 - acc: 0.4535 - val_loss: 1.2322 - val_acc: 0.5676\n",
            "Epoch 2/15\n",
            " - 10s - loss: 1.0773 - acc: 0.6185 - val_loss: 1.0434 - val_acc: 0.6323\n",
            "Epoch 3/15\n",
            " - 10s - loss: 0.8475 - acc: 0.6998 - val_loss: 1.0072 - val_acc: 0.6507\n",
            "Epoch 4/15\n",
            " - 10s - loss: 0.6476 - acc: 0.7728 - val_loss: 1.0114 - val_acc: 0.6728\n",
            "Epoch 5/15\n",
            " - 10s - loss: 0.4495 - acc: 0.8434 - val_loss: 1.1563 - val_acc: 0.6653\n",
            "Epoch 6/15\n",
            " - 10s - loss: 0.2862 - acc: 0.9014 - val_loss: 1.3334 - val_acc: 0.6616\n",
            "Epoch 7/15\n",
            " - 11s - loss: 0.1985 - acc: 0.9306 - val_loss: 1.5633 - val_acc: 0.6543\n",
            "Epoch 8/15\n",
            " - 11s - loss: 0.1529 - acc: 0.9476 - val_loss: 1.7882 - val_acc: 0.6474\n",
            "Epoch 9/15\n",
            " - 11s - loss: 0.1266 - acc: 0.9576 - val_loss: 1.8989 - val_acc: 0.6609\n",
            "Epoch 10/15\n",
            " - 11s - loss: 0.1124 - acc: 0.9624 - val_loss: 2.0340 - val_acc: 0.6455\n",
            "Epoch 11/15\n",
            " - 11s - loss: 0.0882 - acc: 0.9699 - val_loss: 2.0463 - val_acc: 0.6518\n",
            "Epoch 12/15\n",
            " - 11s - loss: 0.0777 - acc: 0.9742 - val_loss: 2.2374 - val_acc: 0.6449\n",
            "Epoch 13/15\n",
            " - 11s - loss: 0.0723 - acc: 0.9760 - val_loss: 2.3876 - val_acc: 0.6523\n",
            "Epoch 14/15\n",
            " - 11s - loss: 0.0739 - acc: 0.9749 - val_loss: 2.4865 - val_acc: 0.6493\n",
            "Epoch 15/15\n",
            " - 11s - loss: 0.0711 - acc: 0.9768 - val_loss: 2.3769 - val_acc: 0.6554\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "mpbKtTuI4Rzb",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "score = model.evaluate(X_test, y_test, batch_size=128, verbose=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZU3vOxPV4Wht",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "dbb2ccd4-814d-4f20-d0f7-c8ce90e7f649"
      },
      "cell_type": "code",
      "source": [
        "print(model.metrics_names)\n",
        "print(score)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['loss', 'acc']\n",
            "[2.411338766479492, 0.6478]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "AWuGhccH4_De",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}