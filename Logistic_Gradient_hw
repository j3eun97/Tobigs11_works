{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dataload and import library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import random\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Label</th>\n",
       "      <th>bias</th>\n",
       "      <th>experience</th>\n",
       "      <th>salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7</td>\n",
       "      <td>48000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.9</td>\n",
       "      <td>48000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>60000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.2</td>\n",
       "      <td>63000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>76000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Label  bias  experience  salary\n",
       "0      1     1         0.7   48000\n",
       "1      0     1         1.9   48000\n",
       "2      1     1         2.5   60000\n",
       "3      0     1         4.2   63000\n",
       "4      0     1         6.0   76000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## 본인의 디렉토리에 맞게 설정하세요 \n",
    "data = pd.read_csv('C:/Users/j3eun/OneDrive/Desktop/tobigs/assignment_2.csv')\n",
    "data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = data.Label\n",
    "#data['salary']=data['salary'].apply(lambda x : x/10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      0\n",
       "2      1\n",
       "3      0\n",
       "4      0\n",
       "5      0\n",
       "6      0\n",
       "7      0\n",
       "8      1\n",
       "9      1\n",
       "10     0\n",
       "11     0\n",
       "12     1\n",
       "13     0\n",
       "14     0\n",
       "15     0\n",
       "16     0\n",
       "17     0\n",
       "18     0\n",
       "19     0\n",
       "20     0\n",
       "21     1\n",
       "22     0\n",
       "23     0\n",
       "24     1\n",
       "25     1\n",
       "26     0\n",
       "27     0\n",
       "28     1\n",
       "29     0\n",
       "      ..\n",
       "170    0\n",
       "171    1\n",
       "172    0\n",
       "173    0\n",
       "174    0\n",
       "175    1\n",
       "176    0\n",
       "177    0\n",
       "178    0\n",
       "179    0\n",
       "180    0\n",
       "181    0\n",
       "182    0\n",
       "183    0\n",
       "184    1\n",
       "185    0\n",
       "186    0\n",
       "187    0\n",
       "188    0\n",
       "189    0\n",
       "190    0\n",
       "191    0\n",
       "192    0\n",
       "193    1\n",
       "194    0\n",
       "195    0\n",
       "196    0\n",
       "197    0\n",
       "198    1\n",
       "199    1\n",
       "Name: Label, Length: 200, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic regression 해야하는 data 의 scatter plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# filter out the applicants that got admitted\n",
    "MALE = data[data['Label']==1]\n",
    "FEMALE = data[data['Label'] == 0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\j3eun\\Anaconda3\\envs\\Herobots\\lib\\site-packages\\matplotlib\\figure.py:98: MatplotlibDeprecationWarning: \n",
      "Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
      "  \"Adding an axes using the same arguments as a previous axes \"\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plots\n",
    "fig = plt.figure()\n",
    "plt.scatter(MALE.iloc[:, 2], MALE.iloc[:, 3], s=10, label='Male')\n",
    "plt.scatter(FEMALE.iloc[:, 2], FEMALE.iloc[:, 3], s=10, label='Female')\n",
    "ax = fig.add_subplot(1,1,1)\n",
    "ax.set_xlabel('Experience')\n",
    "ax.set_ylabel('Salary')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(200, 3)\n"
     ]
    }
   ],
   "source": [
    "## 독립변수들\n",
    "X = data.iloc[:, 1:]\n",
    "\n",
    "# rescaled_X \n",
    "normalized_X = (X[['experience','salary']]-X[['experience','salary']].mean())/X[['experience','salary']].std()\n",
    "normalized_X['bias'] = X['bias']\n",
    "cols = normalized_X.columns.tolist()\n",
    "cols = cols[-1:] + cols[:-1]\n",
    "normalized_X = normalized_X[cols]\n",
    "normalized_X = normalized_X.values.tolist()\n",
    "X= np.array(normalized_X)\n",
    "\n",
    "\n",
    "#Basic_X\n",
    "# X = X.values.tolist()\n",
    "# X = np.array(X)\n",
    "#X\n",
    "\n",
    "# 종속변수 Target = T \n",
    "T = data['Label']\n",
    "T = T.values.tolist()\n",
    "T = np.array(T)\n",
    "#T\n",
    "\n",
    "# 회귀계수\n",
    "beta = np.random.randn(3)\n",
    "#beta= np.array([1,1,1])\n",
    "#beta\n",
    "print(X.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 회귀식\n",
    "## $$ a_n=B^TX = \\hat{B}_0 +\\hat{B}_1x_1 +\\hat{B}_2x_2 ,    \\quad\\mbox{n=데이터 수}$$\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(200,)\n"
     ]
    }
   ],
   "source": [
    "# 내적 -> 회귀계수와 X의 선형결합 \n",
    "a = X.dot(beta)\n",
    "print(a.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$ \\mbox 로그오즈 = 회귀식을\\  p에\\  대해서\\  정리 $$\n",
    "## $$ log(Odds) = \\hat{B}_0 +\\hat{B}_1x_1 + \\hat{B}_2x_2 $$\n",
    "## $$ \\mbox P는 \\ 로지스틱 \\ 함수 $$\n",
    "## $$ P = \\frac{\\mathrm{1} }{\\mathrm{1} + e^{-a_n}} = \\sigma(x,B) $$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-15-0d3f44af8632>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-15-0d3f44af8632>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    for i in a\u001b[0m\n\u001b[1;37m              ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.45243981 0.35073362 0.35367669 0.2407361  0.17624997 0.13581079\n",
      " 0.11172788 0.1130145  0.08574531 0.05587494 0.42063912 0.41217024\n",
      " 0.05204119 0.1711668  0.401032   0.08791643 0.18393463 0.19938954\n",
      " 0.46336539 0.15303239 0.23326816 0.12699297 0.18241096 0.28418112\n",
      " 0.07960365 0.1516443  0.10418994 0.33621679 0.07393603 0.23480976\n",
      " 0.09066745 0.43048612 0.45190725 0.44368145 0.0900907  0.44725922\n",
      " 0.3874408  0.1470163  0.30400141 0.19776887 0.11722118 0.32106482\n",
      " 0.45243981 0.38211054 0.42207368 0.18889391 0.267039   0.11194142\n",
      " 0.48731884 0.10029556 0.32106482 0.11996506 0.19438006 0.31605405\n",
      " 0.17804777 0.34283931 0.35109441 0.32247236 0.28342218 0.36616215\n",
      " 0.10987729 0.05961066 0.30719497 0.12031195 0.15674992 0.33251482\n",
      " 0.34500945 0.11760811 0.1141995  0.1018065  0.14217427 0.13943648\n",
      " 0.06816596 0.53407976 0.15796522 0.11360565 0.11279917 0.24498048\n",
      " 0.23664443 0.43813086 0.33525786 0.2444785  0.26557988 0.15048347\n",
      " 0.10413714 0.24897881 0.49602886 0.33609051 0.18840901 0.2526998\n",
      " 0.09771179 0.31779321 0.16761668 0.3546602  0.31884903 0.35073362\n",
      " 0.04592388 0.48248601 0.10852347 0.45670409 0.07371941 0.18232658\n",
      " 0.11940476 0.06651729 0.03419973 0.36380189 0.26307151 0.30242365\n",
      " 0.27382549 0.30799022 0.13318964 0.17376677 0.37053235 0.09700579\n",
      " 0.37492386 0.12381609 0.15443087 0.15338473 0.08256256 0.0949539\n",
      " 0.52003454 0.07147977 0.17200314 0.09639299 0.07773383 0.06875046\n",
      " 0.10909402 0.31698425 0.3381387  0.06357933 0.34090444 0.10428501\n",
      " 0.33060891 0.17407565 0.16912183 0.10308621 0.20414582 0.38275195\n",
      " 0.20102016 0.27832564 0.33181206 0.33156117 0.2699949  0.41203313\n",
      " 0.46283084 0.25955508 0.10779216 0.17851187 0.1204797  0.50140353\n",
      " 0.07269834 0.08457288 0.11130186 0.25462774 0.24299765 0.30049358\n",
      " 0.51347925 0.48986341 0.28658098 0.14060829 0.19212205 0.09866362\n",
      " 0.15604828 0.1309716  0.10073547 0.09244611 0.19187631 0.55431318\n",
      " 0.46857438 0.18168643 0.15116456 0.10620289 0.16135055 0.15689958\n",
      " 0.17616782 0.05630025 0.22511304 0.36852884 0.44474302 0.27585511\n",
      " 0.15199401 0.31432003 0.22185347 0.09177428 0.24997453 0.45763072\n",
      " 0.29589979 0.44527399 0.12860738 0.31791591 0.35171339 0.10769429\n",
      " 0.23625628 0.30263848 0.09738309 0.17239027 0.12818951 0.21444319\n",
      " 0.05889165 0.05564854]\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "함수를 구현하세요 \n",
    "INPUT: 회귀식(a)\n",
    "Output: P\n",
    "'''\n",
    "def log_odds(a):\n",
    "        return 1 / (1+ np.exp(a))\n",
    "p=log_odds(a)\n",
    "print(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$ \\mbox 각\\  데이터가\\  따르는\\  확률분포를\\   label\\  y와\\  엮어서\\  표현  $$\n",
    "\n",
    "## $$ P(x_i,y_i | B) = \\begin{cases} \\sigma(x,B)^{y}, & \\mbox{if }y\\mbox{ = 1} \\\\ (1-\\sigma(x,B))^{1-y}, & \\mbox{if }y\\mbox{ = 0} \\end{cases} $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$ \\mbox 위의 \\ 확률분포를 \\ 따르는 \\   데이터에서 \\ 얻은 \\ Likelihood  $$\n",
    "\n",
    "## $$ L = \\sigma(x,B)^{y}(1-\\sigma(x,B))^{1-y} $$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$ \\mbox log 변환  $$\n",
    "\n",
    "## $$ L^*=log(L) = y\\sigma(x,B) + (1-y)(1-\\sigma(x,B)) $$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$ \\mbox Convex\\  function으로\\  만들기\\  위한 \\ (-) 곱   $$\n",
    "\n",
    "## $$ \\mbox J는\\ Loss\\ Function  $$\n",
    "\n",
    "## $$ J= - L^* $$\n",
    "\n",
    "## $$ \\mbox Loss\\ function \\ = \\ Negative\\ log \\ likelihood\\  $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$ \\mbox N개의 \\ 데이터에\\ 대한\\ Negative\\ Likelihood  $$\n",
    "## $$ J(x_i,y_i|B) = -\\sum_{i=1}^N y_i\\sigma(x_i,B)- \\sum_{i=1}^N(1-y_i)(1-\\sigma(x_i,B)) $$ \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "153.1903047996914\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "Negative_Likelihood를 구현하세요\n",
    "INPUT: P, Y(LABEL)\n",
    "OUTPUT : 각 데이터들의 Negative_Likelihood 값의 합\n",
    "\n",
    "'''\n",
    "def negative_likelihood(p,y):\n",
    "    sum1=np.sum(np.log(p)*y)\n",
    "    sum2=np.sum((1-y)*np.log(1-p))\n",
    "    sumt= -sum1-sum2\n",
    "    return sumt\n",
    "negative_likelihood= negative_likelihood(p,y)\n",
    "print(negative_likelihood)\n",
    "#def negative_likelihood1(p,y):\n",
    "#    return np.sum(np.log(p)*y)\n",
    "#sum1=negative_likelihood1(p,y)\n",
    "#def negative_likelihood2(p,y):\n",
    "#    return np.sum((1-y)*np.log(1-p))\n",
    "#sum2=negative_likelihood2(p,y)\n",
    "#negative_likelihood = -(sum1+sum2)\n",
    "#negative_likelihood"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loss function 에 대한 Gradient를 구하기 위한 작업 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$ \\mbox J를 \\ B에 \\ 대해서\\ 편미분  $$\n",
    "\n",
    "## $$ \\mbox J는 \\ P에 \\ 대한\\ 함수이고, \\ P는 \\ a에 \\ 대한 \\ 함수이고,\\ a는\\ B에 \\ 대한\\ 함수  $$\n",
    "\n",
    "## $${\\partial J\\over\\partial B} =  -\\sum_{i=1}^N {\\partial J\\over\\partial P_i} {\\partial P_i\\over\\partial a_i} {\\partial a_i\\over\\partial B} $$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $${\\partial J\\over\\partial P_i} = \\frac{y_i}{P_i}- \\frac{1-y_i}{1-P_i} ,\\quad {\\partial P_i\\over\\partial a_i} = P_i(1-P_i), \\quad {\\partial a_i\\over\\partial B}=X^T $$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$ \\mbox 또한 \\ B는 \\ B_0,\\ B_1,\\ B_2이\\  있어서\\ 각각\\ 편미분    $$\n",
    "## $$ \\mbox 간단하게 \\  표현하면   $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $${\\partial J\\over\\partial B} =  -\\sum_{i=1}^N {\\partial J\\over\\partial P_i} {\\partial P_i\\over\\partial a_i} {\\partial a_i\\over\\partial B} = - X^T(y-P) =  X^T(P-y)$$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.18115032,  1.79982946, -1.66419616])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.25841208  1.73900558 -0.06991065]\n",
      "[0.78285916 0.63402381 0.55899139 0.31266489 0.13841381 0.10290137\n",
      " 0.06039021 0.04491252 0.03088751 0.01420309 0.76831737 0.66029024\n",
      " 0.01395327 0.13128994 0.70347226 0.02533695 0.15304976 0.20238851\n",
      " 0.75679388 0.13365469 0.2376309  0.10608987 0.12745204 0.43523543\n",
      " 0.02229217 0.1667761  0.02647219 0.5673742  0.038359   0.20197255\n",
      " 0.01781303 0.66431572 0.79158094 0.77229798 0.03291191 0.79083762\n",
      " 0.78977359 0.07149194 0.54564111 0.17019708 0.0642201  0.52421182\n",
      " 0.78285916 0.72112295 0.81991661 0.24516688 0.49546347 0.05750208\n",
      " 0.75130885 0.04580351 0.52421182 0.12603083 0.25664431 0.5489856\n",
      " 0.15871727 0.50381786 0.72524225 0.48517904 0.34761376 0.57508858\n",
      " 0.06013539 0.01686065 0.45476173 0.05045322 0.23531243 0.553438\n",
      " 0.66846328 0.09029477 0.08142136 0.04834064 0.04769352 0.17843321\n",
      " 0.03228376 0.83531494 0.13470017 0.06064603 0.04719998 0.2916591\n",
      " 0.23844703 0.70010754 0.59273791 0.4104531  0.31947349 0.05908955\n",
      " 0.04182007 0.19653589 0.83751474 0.67793944 0.12273807 0.37535351\n",
      " 0.03719032 0.61335724 0.14958284 0.5331812  0.47106347 0.63402381\n",
      " 0.01352648 0.8283926  0.03452425 0.7038728  0.01689252 0.18992385\n",
      " 0.06141962 0.0156283  0.01469771 0.52244607 0.39084922 0.36471167\n",
      " 0.29915126 0.54675641 0.07317456 0.19592995 0.57618774 0.02878536\n",
      " 0.57728616 0.08717576 0.10627217 0.08361059 0.0213724  0.04993262\n",
      " 0.83344956 0.01511263 0.1718385  0.05268584 0.04085244 0.0165962\n",
      " 0.04679691 0.52308942 0.51570654 0.02000539 0.55566104 0.06235301\n",
      " 0.60416994 0.18785569 0.11938674 0.0833167  0.16419966 0.60462922\n",
      " 0.23891562 0.38276699 0.3480495  0.57901252 0.40548311 0.7572682\n",
      " 0.76625001 0.28466945 0.09722989 0.30457455 0.07489359 0.75382247\n",
      " 0.02414294 0.04387662 0.06657769 0.42640868 0.3481988  0.53158281\n",
      " 0.70427302 0.788916   0.59227413 0.0640653  0.2364697  0.02891142\n",
      " 0.1225314  0.1120227  0.02624125 0.06356696 0.16892989 0.81540913\n",
      " 0.74793074 0.20646684 0.1215671  0.0923759  0.11797482 0.1067003\n",
      " 0.20499631 0.01843101 0.27559616 0.62608134 0.75346583 0.34557573\n",
      " 0.10584556 0.48293151 0.27469875 0.04950743 0.35024402 0.77466308\n",
      " 0.32734995 0.74366554 0.11684324 0.49706851 0.60953754 0.04218217\n",
      " 0.24803167 0.58402007 0.02601227 0.10930107 0.08380839 0.21469403\n",
      " 0.02290296 0.01573757]\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "위에서 구한 Negative Likelihood 함수를 각각 베타에 편미분하여 Gradient를 계산하고\n",
    "Learning_rate와 곱하여 회귀계수를 업데이트 해주세요.\n",
    "회귀계수가 업데이트 될 때 마다, P도 다시 업데이트 되야 합니다. \n",
    "'''\n",
    "learning_rate=0.01\n",
    "iteration = 50\n",
    "def gradient(X,p,y, learning_rate, iteration):\n",
    "    for i in range(iteration):\n",
    "        jb=np.dot(np.transpose(X),np.array(p-y))\n",
    "        beta_learn=beta-learning_rate*jb\n",
    "        a=X.dot(beta_learn)\n",
    "        p=log_odds(a)\n",
    "    return beta_learn\n",
    "beta_learn=gradient(X,p,y,learning_rate, iteration)\n",
    "#print(beta_learn)\n",
    "a = X.dot(np.array(beta_learn))\n",
    "#print(a)\n",
    "p=log_odds(a)\n",
    "print(p)\n",
    "#nl= negative_likelihood(p,y)\n",
    "#nl\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 200)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.T.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     -0.152769\n",
       "1      0.784418\n",
       "2     -0.423474\n",
       "3      0.381874\n",
       "4      0.124501\n",
       "5      0.157687\n",
       "6      0.077467\n",
       "7      0.030462\n",
       "8     -0.966081\n",
       "9     -0.978243\n",
       "10     0.880769\n",
       "11     0.635149\n",
       "12    -0.972033\n",
       "13     0.120724\n",
       "14     0.792239\n",
       "15     0.016807\n",
       "16     0.139930\n",
       "17     0.228117\n",
       "18     0.748905\n",
       "19     0.202424\n",
       "20     0.192254\n",
       "21    -0.778033\n",
       "22     0.082649\n",
       "23     0.538994\n",
       "24    -0.982199\n",
       "25    -0.634596\n",
       "26     0.008901\n",
       "27     0.674767\n",
       "28    -0.882376\n",
       "29     0.109993\n",
       "         ...   \n",
       "170    0.163209\n",
       "171   -0.705566\n",
       "172    0.113464\n",
       "173    0.094936\n",
       "174    0.368134\n",
       "175   -0.954824\n",
       "176    0.342692\n",
       "177    0.704809\n",
       "178    0.794168\n",
       "179    0.310553\n",
       "180    0.106588\n",
       "181    0.533183\n",
       "182    0.357333\n",
       "183    0.100069\n",
       "184   -0.545660\n",
       "185    0.815302\n",
       "186    0.190458\n",
       "187    0.766094\n",
       "188    0.270732\n",
       "189    0.557843\n",
       "190    0.723904\n",
       "191    0.031337\n",
       "192    0.208177\n",
       "193   -0.171872\n",
       "194    0.011485\n",
       "195    0.066547\n",
       "196    0.111702\n",
       "197    0.201500\n",
       "198   -0.930128\n",
       "199   -0.970059\n",
       "Name: Label, Length: 200, dtype: float64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\j3eun\\Anaconda3\\envs\\tobigs\\lib\\site-packages\\matplotlib\\figure.py:98: MatplotlibDeprecationWarning: \n",
      "Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
      "  \"Adding an axes using the same arguments as a previous axes \"\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "'''추정된 회귀계수가 beta=[B0,B2,B3]이라면, 다음 코드를 통해 시각화가 가능합니다'''\n",
    "\n",
    "\n",
    "fig = plt.figure()\n",
    "plt.scatter(MALE.iloc[:, 2], MALE.iloc[:, 3], s=10, label='Male',alpha=0.5)\n",
    "plt.scatter(FEMALE.iloc[:, 2], FEMALE.iloc[:, 3], s=10, label='Female',alpha=0.5)\n",
    "#plt.scatter(X[:,1], X[:,2],c=T , s=10, alpha=0.8)\n",
    "x_axis = np.linspace(0, 10,50)\n",
    "y_axis = -(beta[0] + x_axis*beta[1]) / beta[2]\n",
    "\n",
    "ax = fig.add_subplot(1,1,1)\n",
    "ax.set_xlabel('Experience')\n",
    "ax.set_ylabel('Salary')\n",
    "plt.plot(x_axis, y_axis)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 직접 구현을 한 rough한 GD이기 때문에 성능이 안좋을 수 있습니다\n",
    "### 초기값에 매우 민감하며, 기타 하이퍼 파라미터에 따라 성능이 달라집니다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
